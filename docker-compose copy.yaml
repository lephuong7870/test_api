
version: '3'
x-airflow-common:
  &airflow-common
  image: 19133046/airflow-v1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN:  postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 300
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__LOGGING_LEVEL: 'INFO'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW__CORE__PARALLELISM: 300
    AIRFLOW__CORE__DAG_CONCURRENCY: 150
    AIRFLOW__CELERY__WORKER_CONCURRENCY: 100
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 32
    AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: 32
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
  env_file:
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/scripts:/opt/airflow/scripts
    - ./airflow/utils:/opt/airflow/utils
    - ./airflow/init:/opt/airflow/init
    - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    - ./.env:/.env
  user: "${AIRFLOW_UID}:0"
  networks:
    - api-network
  deploy:
    resources:
      limits:
        memory: 150G
      reservations:
        memory: 100G
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:
  api_server:
    container_name: api-server
    image: 19133046/api-v1 
    expose:
      - 8005
    ports:
      - 8005:8005
    networks:
      - api-network
    restart: unless-stopped

  postgres:
    container_name: ${POSTGRES_CONTAINER}
    hostname: ${POSTGRES_CONTAINER}    
    image: postgres:13
    deploy:
      resources:
        limits:
          memory: 100G
    volumes:
      - ./postgres_data:/var/lib/postgresql/data 
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - 5432
    restart: unless-stopped
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5  
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        sleep 10
        psql -U postgres -d postgres -c \"CREATE DATABASE \\\"apidb\\\"\"
        wait
      "


  redis:
    container_name: redis
    image: redis:latest
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: 
      - -c
      - |
        chown -R "${AIRFLOW_UID}:0" /opt/airflow
        chmod +x  /opt/airflow/init/auth-airflow.sh
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
    user: "0:0"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    entrypoint:
      - /opt/airflow/init/auth-airflow.sh
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-flower:
      <<: *airflow-common
      command : celery flower
      ports:
        - 5555:5555
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully        

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on           
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5 
    restart: always
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully



  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

networks:
  api-network:
    name: api-network

volumes:
  postgres_data:
